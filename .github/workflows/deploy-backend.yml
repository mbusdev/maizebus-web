name: Deploy Backend to AWS EC2

on:
  push:
    branches: [ main ]
    paths: [ 'server/**' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        cache-dependency-path: 'server/package-lock.json'
        node-version: '22.12'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd server && npm ci
        
    - name: Build backend
      run: |
        cd server && npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r server/dist deployment/
        cp server/package.json deployment/
        cp server/package-lock.json deployment/
        cp -r server/node_modules deployment/ || true
        tar -czf deployment.tar.gz -C deployment .
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          # Install Node.js if not already installed
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Verify Node.js installation
          node --version
          npm --version
          
          # Create deployment directory
          mkdir -p /home/ubuntu/maizebus-backend
          cd /home/ubuntu/maizebus-backend
          
          # Stop existing service
          sudo systemctl stop maizebus-backend || true
          
          # Backup current deployment
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p current
          
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/home/ubuntu/maizebus-backend/current/"
        
    - name: Extract and setup on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          cd /home/ubuntu/maizebus-backend/current
          
          # Extract deployment
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Install production dependencies
          npm ci --production
          
          # Install screen, nginx, and certbot if not already installed
          sudo apt-get update
          sudo apt-get install -y screen nginx certbot python3-certbot-nginx
          
          # Set up systemd service
          sudo tee /etc/systemd/system/maizebus-backend.service > /dev/null <<EOF
          [Unit]
          Description=MaizeBus Backend Service
          After=network.target
          
          [Service]
          Type=forking
          User=ubuntu
          WorkingDirectory=/home/ubuntu/maizebus-backend/current
          ExecStart=/usr/bin/screen -dmS maizebus-backend /usr/bin/node dist/server.js
          ExecStop=/usr/bin/screen -S maizebus-backend -X quit
          Restart=always
          RestartSec=10
          Environment=NODE_ENV=production
          Environment=PORT=3001
          Environment=FRONTEND_URL=${{ secrets.FRONTEND_URL || 'https://mbusdev.github.io/maizebus-web' }}
          Environment=DOMAIN_NAME=${{ secrets.DOMAIN_NAME || 'ec2-3-129-13-199.us-east-2.compute.amazonaws.com' }}
          Environment=EMAIL_USER=${{ secrets.EMAIL_USER }}
          Environment=EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          Environment=EMAIL_TO=${{ secrets.EMAIL_TO }}
          Environment=EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          Environment=EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Set up Nginx reverse proxy with HTTPS FIRST
          echo "Setting up Nginx configuration..."
          
          # Create initial Nginx configuration
          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "Using custom domain: ${{ secrets.DOMAIN_NAME }}"
            sudo tee /etc/nginx/sites-available/maizebus-backend > /dev/null <<EOF
          # HTTP server - will be modified by certbot
          server {
              listen 80;
              server_name ${{ secrets.DOMAIN_NAME }};
              
              location / {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
          else
            echo "Using EC2 domain fallback"
            sudo tee /etc/nginx/sites-available/maizebus-backend > /dev/null <<EOF
          # HTTP server - EC2 domain fallback
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
          fi
          
          # Remove default Nginx site and enable our site
          echo "Enabling Nginx site and testing configuration..."
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo ln -sf /etc/nginx/sites-available/maizebus-backend /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          
          # Check if Let's Encrypt certificate exists
          if [ -n "${{ secrets.DOMAIN_NAME }}" ] && [ -f "/etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem" ]; then
            echo "Using existing Let's Encrypt certificate for ${{ secrets.DOMAIN_NAME }}"
            # Certbot will have already modified the configuration
          else
              echo "Using self-signed certificate with EC2 domain (Let's Encrypt failed)"
              # Self-signed certificate configuration with EC2 domain
              sudo tee /etc/nginx/sites-available/maizebus-backend > /dev/null <<EOF
          # HTTP server - redirect to HTTPS
          server {
              listen 80;
              server_name _;
              return 301 https://\$server_name\$request_uri;
          }
          
          # HTTPS server
          server {
              listen 443 ssl http2;
              server_name _;
              
              # SSL configuration (self-signed)
              ssl_certificate /etc/ssl/certs/maizebus-selfsigned.crt;
              ssl_certificate_key /etc/ssl/private/maizebus-selfsigned.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              location / {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
            fi
          else
            # Self-signed certificate configuration
            sudo tee /etc/nginx/sites-available/maizebus-backend > /dev/null <<EOF
          # HTTP server - redirect to HTTPS
          server {
              listen 80;
              server_name _;
              return 301 https://\$server_name\$request_uri;
          }
          
          # HTTPS server
          server {
              listen 443 ssl http2;
              server_name _;
              
              # SSL configuration (self-signed)
              ssl_certificate /etc/ssl/certs/maizebus-selfsigned.crt;
              ssl_certificate_key /etc/ssl/private/maizebus-selfsigned.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              location / {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
          fi
          
          # Enable the site
          sudo ln -sf /etc/nginx/sites-available/maizebus-backend /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t && sudo systemctl reload nginx
          
          # Now try to get Let's Encrypt certificate (after Nginx is configured)
          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "Attempting to get Let's Encrypt certificate for ${{ secrets.DOMAIN_NAME }}"
            if sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos --email ${{ secrets.EMAIL_TO }} --redirect; then
              echo "✅ Let's Encrypt certificate obtained successfully"
            else
              echo "❌ Let's Encrypt failed, falling back to self-signed certificate with EC2 domain"
              sudo mkdir -p /etc/ssl/certs /etc/ssl/private
              sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout /etc/ssl/private/maizebus-selfsigned.key \
                -out /etc/ssl/certs/maizebus-selfsigned.crt \
                -subj "/C=US/ST=MI/L=Ann Arbor/O=MaizeBus/CN=ec2-3-129-13-199.us-east-2.compute.amazonaws.com"
            fi
          else
            echo "No domain name provided, generating self-signed certificate"
            sudo mkdir -p /etc/ssl/certs /etc/ssl/private
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/ssl/private/maizebus-selfsigned.key \
              -out /etc/ssl/certs/maizebus-selfsigned.crt \
              -subj "/C=US/ST=MI/L=Ann Arbor/O=MaizeBus/CN=ec2-3-129-13-199.us-east-2.compute.amazonaws.com"
          fi
          sudo systemctl restart nginx
          
          # Reload systemd and start service
          sudo systemctl daemon-reload
          sudo systemctl enable maizebus-backend
          sudo systemctl start maizebus-backend
          
          # Check service status
          sudo systemctl status maizebus-backend --no-pager
          sudo systemctl status nginx --no-pager
          
          # Check if screen session is running
          screen -list | grep maizebus-backend || echo "Screen session not found"
          
          # Test endpoints
          echo "Testing backend directly:"
          curl -s http://localhost:3001/health || echo "Backend not responding"
          echo "Testing through Nginx HTTP (should redirect):"
          curl -s -I http://localhost/health || echo "Nginx HTTP not working"
          echo "Testing through Nginx HTTPS:"
          curl -s -k https://localhost/health || echo "Nginx HTTPS not working"
          
          # Show environment variables (without sensitive data)
          echo "Environment check:"
          echo "NODE_ENV: $NODE_ENV"
          echo "PORT: $PORT"
          echo "FRONTEND_URL: $FRONTEND_URL"
          echo "EMAIL_USER: ${EMAIL_USER:+SET}"
          echo "EMAIL_PASS: ${EMAIL_PASS:+SET}"
          echo "EMAIL_TO: $EMAIL_TO"
          
          # Cleanup old backups (keep last 3)
          cd /home/ubuntu/maizebus-backend
          ls -t backup-* | tail -n +4 | xargs -r rm -rf
